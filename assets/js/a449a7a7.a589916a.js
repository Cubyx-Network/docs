"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[73],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var m=i.createContext({}),s=function(e){var n=i.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return i.createElement(m.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,m=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=s(t),c=r,g=u["".concat(m,".").concat(c)]||u[c]||p[c]||a;return t?i.createElement(g,l(l({ref:n},d),{},{components:t})):i.createElement(g,l({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=c;var o={};for(var m in n)hasOwnProperty.call(n,m)&&(o[m]=n[m]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5718:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>s});var i=t(7462),r=(t(7294),t(3905));const a={},l="Richtlinie f\xfcr Commits",o={unversionedId:"guidelines/commits",id:"guidelines/commits",title:"Richtlinie f\xfcr Commits",description:"Conventional Commits",source:"@site/docs/guidelines/commits.md",sourceDirName:"guidelines",slug:"/guidelines/commits",permalink:"/docs/guidelines/commits",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"generalSidebar",previous:{title:"Coding-Richtlinien",permalink:"/docs/guidelines/"},next:{title:"Richtlinie f\xfcr Pull Requests",permalink:"/docs/guidelines/pull-requests"}},m={},s=[{value:"Conventional Commits",id:"conventional-commits",level:2},{value:"Aufbau",id:"aufbau",level:3},{value:"Commit-Prefix",id:"commit-prefix",level:4},{value:"Scope (optional)",id:"scope-optional",level:4},{value:"Breaking Change (optional)",id:"breaking-change-optional",level:4},{value:"Commit-Message",id:"commit-message",level:4},{value:"Commit-Body (optional)",id:"commit-body-optional",level:4},{value:"Beispiel",id:"beispiel",level:3},{value:"Warum Conventional Commits?",id:"warum-conventional-commits",level:3}],d={toc:s},u="wrapper";function p(e){let{components:n,...a}=e;return(0,r.kt)(u,(0,i.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"richtlinie-f\xfcr-commits"},"Richtlinie f\xfcr Commits"),(0,r.kt)("h2",{id:"conventional-commits"},"Conventional Commits"),(0,r.kt)("p",null,"F\xfcr all unsere Projekte verfolgen wir im Groben die ",(0,r.kt)("a",{parentName:"p",href:"https://www.conventionalcommits.org/en/v1.0.0/"},"Conventional Commits")," Spezifikation. Diese Spezifikation beschreibt, wie eine Commit-Message aufgebaut sein muss."),(0,r.kt)("h3",{id:"aufbau"},"Aufbau"),(0,r.kt)("h4",{id:"commit-prefix"},"Commit-Prefix"),(0,r.kt)("p",null,"Eine Commit-Message erh\xe4lt stets einen Prefix. Dieser Prefix beschreibt, was f\xfcr eine Art von Commit es ist. Ein Prefix wird immer klein geschrieben und wird von der eigentlichen Commit-Message durch ein Doppelpunkt getrennt."),(0,r.kt)("p",null,"Es gibt folgende Prefixe:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Prefix"),(0,r.kt)("th",{parentName:"tr",align:null},"Beschreibung"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"feat")),(0,r.kt)("td",{parentName:"tr",align:null},"Ein neues Feature wurde hinzugef\xfcgt")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"change")),(0,r.kt)("td",{parentName:"tr",align:null},"Ein bestehendes Feature wurde ge\xe4ndert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"fix")),(0,r.kt)("td",{parentName:"tr",align:null},"Ein Fehler wurde behoben")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"docs")),(0,r.kt)("td",{parentName:"tr",align:null},"Die Dokumentation wurde ge\xe4ndert")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"style")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen am Design vorgenommen (v.A. bei Grafischen Anwendungen)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"refactor")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen am Code vorgenommen, die keine neuen Features hinzuf\xfcgen oder Fehler beheben")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"deps")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen an den Abh\xe4ngigkeiten vorgenommen")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"content")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen am Inhalt vorgenommen, z.B. bei einer Website")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"chore")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden marginale \xc4nderungen vorgenommen, welche bestehende Features nicht beeinflussen")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"test")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen an den Tests vorgenommen")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ci")),(0,r.kt)("td",{parentName:"tr",align:null},"Es wurden \xc4nderungen an der CI vorgenommen")))),(0,r.kt)("h4",{id:"scope-optional"},"Scope (optional)"),(0,r.kt)("p",null,"Der Scope beschreibt, welcher Teil des Projektes betroffen ist. Dieser ist optional, da nicht immer ein Scope ben\xf6tigt wird. Ein Scope wird in runden Klammern hinter dem Prefix angegeben."),(0,r.kt)("p",null,"Zum Beispiel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"feat(website): Neue Startseite hinzugef\xfcgt\n")),(0,r.kt)("h4",{id:"breaking-change-optional"},"Breaking Change (optional)"),(0,r.kt)("p",null,"Ein Breaking Change ist eine \xc4nderung, die bestehende Features beeinflusst. Diese \xc4nderung kann z.B. dazu f\xfchren, dass bestehende Features nicht mehr funktionieren. Ein Commit kann als Breaking Change markiert werden, indem hinter dem Prefix ein ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," angegeben wird."),(0,r.kt)("p",null,"Zum Beispiel:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"change!: Klasse User zu Klasse Users umbenannt\n\nchange(api)!: Endpoint von POST /api/user zu POST /api/users ge\xe4ndert\n")),(0,r.kt)("h4",{id:"commit-message"},"Commit-Message"),(0,r.kt)("p",null,"Die Commit-Message beschreibt, was genau ge\xe4ndert wurde. Diese wird nach dem Prefix und dem Scope angegeben."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Die Commit-Message ist bevorzugt auf Englisch zu schreiben. Bei Projekten, die nur auf Deutsch sind, kann auch Deutsch verwendet werden.")),(0,r.kt)("h4",{id:"commit-body-optional"},"Commit-Body (optional)"),(0,r.kt)("p",null,"Wenn in einem Commit gleich mehrere \xc4nderungen get\xe4tig worden, empfiehlt es sich, diese in einem Commit-Body zu beschreiben. Dieser wird nach dem gleichen Schema wie die Commit-Message aufgebaut. Jede Zeile stellt dabei eine \xc4nderung dar."),(0,r.kt)("h3",{id:"beispiel"},"Beispiel"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Beispiel",src:t(5248).Z,width:"764",height:"370"})),(0,r.kt)("h3",{id:"warum-conventional-commits"},"Warum Conventional Commits?"),(0,r.kt)("p",null,"Conventional Commits ist nicht nur ein Standard, der sich bei vielen Projekten durchgesetzt hat, sondern bietet auch viele Vorteile. Einerseits k\xf6nnen Commits schnell kategorisiert und verstanden werden. Weiterhin k\xf6nnen aus den Commits automatisch Changelogs generiert werden (siehe ",(0,r.kt)("a",{parentName:"p",href:"release-please"},"Release Please"),"). Au\xdferdem k\xf6nnen aus den Commits automatisch Versionsnummern generiert werden (siehe ",(0,r.kt)("a",{parentName:"p",href:"semver"},"Sementic Versioning"),")."))}p.isMDXComponent=!0},5248:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/commit-120201e4b70cc1ccc1c2c29ab908902c.png"}}]);